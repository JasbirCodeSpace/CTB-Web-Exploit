const cors = require("cors");
const express = require("express");
const cookieParser = require("cookie-parser");
const model = require("./model");
const app = express();
require("dotenv").config({ path: "./env/.env" });
const port = process.env.PORT;
const mongoose = require("mongoose");
var mysql = require("mysql");
var con = mysql.createConnection({
    host: process.env.HOST,
    user: process.env.USER,
    password: process.env.PASSWORD,
    database: process.env.DB,
});
con.connect((err) => {
    if (err) throw err;
    console.log("DB Connected!");
});

app.use(cors());
app.use(cookieParser());
app.use(express.urlencoded({ extended: false }));
app.use(express.json());
app.get("/login", async (req, res) => {
    try {
        return res
            .status(200)
            .sendFile("./public/login.html", { root: __dirname });
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.get("/rev", async (req, res) => {
    try {
        return res
            .status(200)
            .sendFile("./public/reverse.html", { root: __dirname });
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.get("/reve", async (req, res) => {
    try {
        const flag = "ctb{r3v3r53_15_fun}";
        const input = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        const output = "NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm";
        const index = (x) => input.indexOf(x);
        const translate = (x) => (index(x) > -1 ? output[index(x)] : x);
        const str2 = flag.split("").map(translate).join("");
        const op = Buffer.from(str2).toString("base64");
        return res.status(200).json({ message: op }); //flag
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.get("/revSrc", async (req, res) => {
    try {
        return res
            .status(200)
            .sendFile("./public/source.txt", { root: __dirname }); //flag
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.get("/needle", async (req, res) => {
    try {
        return res
            .status(200)
            .sendFile("./public/taskInj.html", { root: __dirname });
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.get("/task1", async (req, res) => {
    try {
        return res
            .status(200)
            .sendFile("./public/taskIns.html", { root: __dirname });
    } catch (err) {
        console.log(err.message);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.post("/logintask", async (req, res) => {
    try {
        if (req.cookies["cookiectf"] == 1)
            return res.status(200).json({ message: "ctb{3nigMatRix}" });
        if (req.body.name == "admin" && req.body.pwd == "admin")
            return res.cookie("cookiectf", 0).status(200).json({
                message: "Can't login now .Go take a break and have a biscuit ",
            }); //something else clue
        return res
            .status(200)
            .json({ message: "Incorrect username and password" });
    } catch (err) {
        console.log(err.message);
        return res.status(500).json("Server Error");
    }
});
app.post("/loginInj", async (req, res) => {
    try {
        const { name, pwd } = req.body;
        const query =
            'SELECT * FROM login WHERE username ="' +
            name +
            '" AND password ="' +
            pwd +
            '"';
        try {
            con.query(query, (err, result, fields) => {
                if (err) console.log(err.message);
                if (result && result.length > 0)
                    return res
                        .status(200)
                        .json({ message: "ctb{y0u_5ql_3x93r7}" });

                return res
                    .status(200)
                    .json({ message: "Incorrect username and password" });
            });
        } catch (err) {
            console.log(err.message);
            return res.status(404).json({ message: "Try again later" });
        }
    } catch (err) {
        console.log(err);
        return res
            .status(500)
            .json({ message: "Server Error, Try again later" });
    }
});
app.listen(port, () => console.log("info", `server started at port ${port}`));
